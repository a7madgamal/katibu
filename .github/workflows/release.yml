name: Release

on:
  workflow_dispatch:

jobs:
  prepare_release:
    name: Release
    outputs:
      commit_id: ${{ steps.release_commit.outputs.commit_id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    runs-on: 'ubuntu-latest'

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Create release commit
        id: release_commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git rev-parse HEAD
          yarn release
          git rev-parse HEAD
          echo "::set-env name=COMMIT_ID::`git rev-parse HEAD`"
          echo "::set-env name=LATEST_TAG::`git describe --tags --abbrev=0`"
          echo "::set-output name=commit_id::$release_commit"

      - name: Create GH Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.LATEST_TAG }}
          release_name: ${{ env.LATEST_TAG }}
          draft: true
          prerelease: true

  release_ubuntu:
    name: Release (Ubuntu)
    runs-on: 'ubuntu-latest'
    needs: [prepare_release]
    steps:
      - name: Checkout Latest
        uses: actions/checkout@v1

      - name: Package (Ubuntu)
        run: |
          yarn install --frozen-lockfile
          yarn make
          ls -R out/
          echo "::set-env name=DEB_ASSET_NAME::`find out/make/deb/x64/ -name "*.deb" -exec basename {} \;`"
          echo "::set-env name=RPM_ASSET_NAME::`find out/make/rpm/x64/ -name "*.rpm" -exec basename {} \;`"

      - name: Upload Release Asset (Ubuntu - deb)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: './out/make/deb/x64/${{ env.DEB_ASSET_NAME }}'
          asset_name: ${{ env.DEB_ASSET_NAME }}
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Release Asset (Ubuntu - rpm)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: './out/make/rpm/x64/${{ env.RPM_ASSET_NAME }}'
          asset_name: ${{ env.RPM_ASSET_NAME }}
          asset_content_type: application/x-rpm

  release_macos:
    name: Release (MacOS)
    runs-on: 'macos-latest'
    needs: [prepare_release]
    steps:
      - name: Checkout Latest
        uses: actions/checkout@v1

      - name: Package (MacOS)
        run: |
          yarn install --frozen-lockfile
          yarn make
          ls -R out/make
          echo "::set-env name=ZIP_ASSET_NAME::`find out/make/zip/darwin/x64/ -name "*.zip" -exec basename {} \;`"

      - name: Upload Release Asset (MacOS - zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: './out/make/zip/darwin/x64/${{ env.ZIP_ASSET_NAME }}'
          asset_name: ${{ env.ZIP_ASSET_NAME }}
          asset_content_type: application/zip

  release_win:
    name: Release (Win)
    runs-on: 'windows-latest'
    needs: [prepare_release]
    steps:
      - name: Checkout Latest
        uses: actions/checkout@v1

      - name: Package (Win)
        run: |
          yarn install --frozen-lockfile
          curl -OLS https://github.com/wixtoolset/wix3/releases/download/wix3111rtm/wix311.exe
          .\wix311.exe /install /quiet /norestart
          $wixPath='"' + "C:\Program Files (x86)\WiX Toolset v3.11\bin\" +'"'
          $ENV:PATH="$ENV:PATH;$wixPath"
          yarn make
          ls -R out/make
          $result=Get-ChildItem -Path out\make\wix\x64 -include *.msi -Name
          echo "::set-env name=MSI_ASSET_NAME::$result"

      - name: Upload Release Asset (Win - zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: './out/make/wix/x64/${{ env.MSI_ASSET_NAME }}'
          asset_name: ${{ env.MSI_ASSET_NAME }}
          asset_content_type: application/octet-stream
