name: Release

on:
  workflow_dispatch:
    # inputs:
    #   logLevel:
    #     description: 'Log level'
    #     required: true
    #     default: 'warning'
    # tags:
    #   description: 'Test scenario tags'

jobs:
  prepare_release:
    name: Release
    outputs:
      commit_id: ${{ steps.release_commit.outputs.commit_id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    # outputs:
    #   sum: # id of the output
    #   description: 'The sum of the inputs'
    runs-on: 'ubuntu-latest'
    # strategy:
    #   matrix:
    #     os: [windows-latest, macOS-latest, ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12

      # Get-ChildItem -Path "C:\Program Files (x86)\WiX Toolset v3.11\"
      # npm config set node-gyp "$($env:GITHUB_WORKSPACE)\node_modules\node-gyp\bin\node-gyp.js"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # - name: Package
      #   # if: matrix.os != 'windows-latest'
      #   run: yarn make

      - name: Create release commit
        id: release_commit
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git rev-parse HEAD
          yarn release
          git rev-parse HEAD
          echo "::set-env name=COMMIT_ID::`git rev-parse HEAD`"
          echo "::set-env name=LATEST_TAG::`git describe --tags --abbrev=0`"
          echo "::set-output name=commit_id::$release_commit"

        # echo "::set-env name=COMMIT_TITLE::`git show -s --format='%s'`"
      - name: Create GH Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.LATEST_TAG }}
          release_name: ${{ env.LATEST_TAG }}
          draft: true
          prerelease: true

  release_ubuntu:
    name: Release (Ubuntu)
    runs-on: 'ubuntu-latest'
    needs: [prepare_release]
    steps:
      - name: Checkout Latest
        uses: actions/checkout@v1

      - name: Package (Ubuntu)
        run: |
          yarn install --frozen-lockfile
          yarn make
          ls -R out/make
          echo "::set-env name=DEB_ASSET_NAME::`find out/make/deb/x64/ -name "*.deb" -exec basename {} \;`"
          echo "::set-env name=RPM_ASSET_NAME::`find out/make/rpm/x64/ -name "*.rpm" -exec basename {} \;`"

      - name: Upload Release Asset (Ubuntu - deb)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: './out/make/deb/x64/${{ env.DEB_ASSET_NAME }}'
          asset_name: ${{ env.DEB_ASSET_NAME }}
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Release Asset (Ubuntu - rpm)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: './out/make/rpm/x64/${{ env.RPM_ASSET_NAME }}'
          asset_name: ${{ env.RPM_ASSET_NAME }}
          asset_content_type: application/x-rpm

  release_macos:
    name: Release (MacOS)
    runs-on: 'macos-latest'
    needs: [prepare_release]
    steps:
      - name: Checkout Latest
        uses: actions/checkout@v1

      - name: Package (MacOS)
        run: |
          yarn install --frozen-lockfile
          yarn make
          ls -R out/make
          echo "::set-env name=ZIP_ASSET_NAME::`find out/make/zip/darwin/x64/ -name "*.zip" -exec basename {} \;`"

      - name: Upload Release Asset (MacOS - zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: './out/make/zip/darwin/x64/${{ env.ZIP_ASSET_NAME }}'
          asset_name: ${{ env.ZIP_ASSET_NAME }}
          asset_content_type: application/zip

  release_win:
    name: Release (Win)
    runs-on: 'windows-latest'
    needs: [prepare_release]
    steps:
      - name: Checkout Latest
        uses: actions/checkout@v1

      - name: Package (Win)
        run: |
          yarn install --frozen-lockfile
          curl -OLS https://github.com/wixtoolset/wix3/releases/download/wix3111rtm/wix311.exe
          .\wix311.exe /install /quiet /norestart
          $wixPath='"' + "C:\Program Files (x86)\WiX Toolset v3.11\bin\" +'"'
          $ENV:PATH="$ENV:PATH;$wixPath"
          yarn make
          ls -R out/make
          $result=Get-ChildItem -Path out\make\wix\x64 -include *.msi -Name
          echo "::set-env name=MSI_ASSET_NAME::$result"

      - name: Upload Release Asset (Win - zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: './out/make/wix/x64/${{ env.MSI_ASSET_NAME }}'
          asset_name: ${{ env.MSI_ASSET_NAME }}
          asset_content_type: application/octet-stream
# - name: DEBUG:Dump contexts
#   env:
#     GITHUB_CONTEXT: ${{ toJson(github) }}
#     JOB_CONTEXT: ${{ toJson(job) }}
#     STEPS_CONTEXT: ${{ toJson(steps) }}
#     ENV_CONTEXT: ${{ toJson(env) }}
#   run: |
#     echo "COMMIT_ID: $COMMIT_ID"
#     echo "LATEST_TAG: $LATEST_TAG"
#     echo "GITHUB_CONTEXT: $GITHUB_CONTEXT"
#     echo "JOB_CONTEXT: $JOB_CONTEXT"
#     echo "STEPS_CONTEXT: $STEPS_CONTEXT"
#     echo "ENV_CONTEXT: $ENV_CONTEXT"
# # echo "COMMIT_TITLE: $COMMIT_TITLE"
